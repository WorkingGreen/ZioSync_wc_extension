name: Create Release with Zipped Folder

on:
  push:
    tags:
      - 'v*' # This workflow will run whenever a tag starting with 'v' is pushed
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'The tag for the release (e.g., v1.0.0)'
        required: true
        default: 'v-manual-release'

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js (Optional, only if your build process needs it)
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Or your desired Node.js version

    # - name: Install dependencies (Optional, if your folder contains project dependencies)
    #   # cd my_build_output # Uncomment if you need to run npm install inside the folder
    #   # run: npm install

    # - name: Build project (Optional, if your folder needs to be generated)
    #   # run: npm run build # Example: Replace with your actual build command

    - name: Get tag name
      id: get_tag
      run: |
        # Use GITHUB_REF_NAME which already gives the clean tag/branch name
        # If triggered by a tag push, GITHUB_REF_NAME will be the tag name (e.g., v1.0.0)
        # If triggered by workflow_dispatch, it will be the branch name (e.g., main)
        # or the input provided.

        TAG_NAME=""
        if [ "${{ github.event_name }}" == "push" ]; then
          # For tag pushes, GITHUB_REF_NAME is already the clean tag
          TAG_NAME="${{ github.ref_name }}"
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # For manual dispatch, prioritize the input, then a default with timestamp
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            TAG_NAME="${{ github.event.inputs.release_tag }}"
          else
            TAG_NAME="manual-release-$(date +%Y%m%d%H%M%S)"
          fi
        fi
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

    - name: Create zip archive of specific folder
      run: |
        FOLDER_TO_ZIP="ziosync-woocommerce-rest-api-plugin"
        ZIP_FILE_NAME="ziosync-woocommerce-rest-api-plugin.zip"
        zip -r $ZIP_FILE_NAME $FOLDER_TO_ZIP

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.TAG_NAME }}
        name: Release ${{ steps.get_tag.outputs.TAG_NAME }}
        draft: false
        prerelease: false
        files: |
          ziosync-woocommerce-rest-api-plugin.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub
    - name: Remove Source Code Assets
      uses: actions/github-script@v7
      with:
        script: |
          // Get the release that was just created
          const release = await github.rest.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ steps.create_release.outputs.id }}
          });

          // Find the source code assets by their default names
          const sourceAssets = release.data.assets.filter(asset =>
            asset.name.startsWith('Source code')
          );

          // Delete each source code asset
          for (const asset of sourceAssets) {
            console.log('Deleting asset:', asset.name);
            await github.rest.repos.deleteReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              asset_id: asset.id,
            });
          }
